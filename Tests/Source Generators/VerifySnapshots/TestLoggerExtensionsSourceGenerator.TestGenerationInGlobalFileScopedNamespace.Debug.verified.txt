// <auto-generated/>
#nullable enable

using System;
using static MqttSql.Test.Logging.Logger;

namespace MqttSql.Test.Logging;

public static partial class Extensions
{
    // public static void Trace(this Logger logger, params string[] messageBits) => logger.Log(LogLevel.Trace, messageBits);
    public static void Trace(this Logger logger, params object?[]? messageBits) => logger.Log(LogLevel.Trace, messageBits);
    // public static void Trace(this Logger logger, Exception exception, params string[] messageBits) => logger.Log(LogLevel.Trace, exception, messageBits);
    public static void Trace(this Logger logger, Exception exception, params object?[]? messageBits) => logger.Log(LogLevel.Trace, exception, messageBits);
    public static void Trace(this Logger logger, Exception exception) => logger.Log(LogLevel.Trace, exception);
    // public static void Debug(this Logger logger, params string[] messageBits) => logger.Log(LogLevel.Debug, messageBits);
    public static void Debug(this Logger logger, params object?[]? messageBits) => logger.Log(LogLevel.Debug, messageBits);
    // public static void Debug(this Logger logger, Exception exception, params string[] messageBits) => logger.Log(LogLevel.Debug, exception, messageBits);
    public static void Debug(this Logger logger, Exception exception, params object?[]? messageBits) => logger.Log(LogLevel.Debug, exception, messageBits);
    public static void Debug(this Logger logger, Exception exception) => logger.Log(LogLevel.Debug, exception);
    // public static void Information(this Logger logger, params string[] messageBits) => logger.Log(LogLevel.Information, messageBits);
    public static void Information(this Logger logger, params object?[]? messageBits) => logger.Log(LogLevel.Information, messageBits);
    // public static void Information(this Logger logger, Exception exception, params string[] messageBits) => logger.Log(LogLevel.Information, exception, messageBits);
    public static void Information(this Logger logger, Exception exception, params object?[]? messageBits) => logger.Log(LogLevel.Information, exception, messageBits);
    public static void Information(this Logger logger, Exception exception) => logger.Log(LogLevel.Information, exception);
    // public static void Warning(this Logger logger, params string[] messageBits) => logger.Log(LogLevel.Warning, messageBits);
    public static void Warning(this Logger logger, params object?[]? messageBits) => logger.Log(LogLevel.Warning, messageBits);
    // public static void Warning(this Logger logger, Exception exception, params string[] messageBits) => logger.Log(LogLevel.Warning, exception, messageBits);
    public static void Warning(this Logger logger, Exception exception, params object?[]? messageBits) => logger.Log(LogLevel.Warning, exception, messageBits);
    public static void Warning(this Logger logger, Exception exception) => logger.Log(LogLevel.Warning, exception);
    // public static void Error(this Logger logger, params string[] messageBits) => logger.Log(LogLevel.Error, messageBits);
    public static void Error(this Logger logger, params object?[]? messageBits) => logger.Log(LogLevel.Error, messageBits);
    // public static void Error(this Logger logger, Exception exception, params string[] messageBits) => logger.Log(LogLevel.Error, exception, messageBits);
    public static void Error(this Logger logger, Exception exception, params object?[]? messageBits) => logger.Log(LogLevel.Error, exception, messageBits);
    public static void Error(this Logger logger, Exception exception) => logger.Log(LogLevel.Error, exception);
    // public static void Critical(this Logger logger, params string[] messageBits) => logger.Log(LogLevel.Critical, messageBits);
    public static void Critical(this Logger logger, params object?[]? messageBits) => logger.Log(LogLevel.Critical, messageBits);
    // public static void Critical(this Logger logger, Exception exception, params string[] messageBits) => logger.Log(LogLevel.Critical, exception, messageBits);
    public static void Critical(this Logger logger, Exception exception, params object?[]? messageBits) => logger.Log(LogLevel.Critical, exception, messageBits);
    public static void Critical(this Logger logger, Exception exception) => logger.Log(LogLevel.Critical, exception);
    public static void Trace<T0>(this Logger logger, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Trace)) return;
        logger.Log(LogLevel.Trace, new object?[] { messageBit0 });
    }
    public static void Trace<T0>(this Logger logger, Exception exception, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Trace)) return;
        logger.Log(LogLevel.Trace, exception, new object?[] { messageBit0 });
    }
    public static void Debug<T0>(this Logger logger, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Debug)) return;
        logger.Log(LogLevel.Debug, new object?[] { messageBit0 });
    }
    public static void Debug<T0>(this Logger logger, Exception exception, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Debug)) return;
        logger.Log(LogLevel.Debug, exception, new object?[] { messageBit0 });
    }
    public static void Information<T0>(this Logger logger, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Information)) return;
        logger.Log(LogLevel.Information, new object?[] { messageBit0 });
    }
    public static void Information<T0>(this Logger logger, Exception exception, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Information)) return;
        logger.Log(LogLevel.Information, exception, new object?[] { messageBit0 });
    }
    public static void Warning<T0>(this Logger logger, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Warning)) return;
        logger.Log(LogLevel.Warning, new object?[] { messageBit0 });
    }
    public static void Warning<T0>(this Logger logger, Exception exception, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Warning)) return;
        logger.Log(LogLevel.Warning, exception, new object?[] { messageBit0 });
    }
    public static void Error<T0>(this Logger logger, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Error)) return;
        logger.Log(LogLevel.Error, new object?[] { messageBit0 });
    }
    public static void Error<T0>(this Logger logger, Exception exception, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Error)) return;
        logger.Log(LogLevel.Error, exception, new object?[] { messageBit0 });
    }
    public static void Critical<T0>(this Logger logger, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Critical)) return;
        logger.Log(LogLevel.Critical, new object?[] { messageBit0 });
    }
    public static void Critical<T0>(this Logger logger, Exception exception, T0 messageBit0) {
        if (!logger.EnabledFor(LogLevel.Critical)) return;
        logger.Log(LogLevel.Critical, exception, new object?[] { messageBit0 });
    }
    public static void Trace<T0, T1>(this Logger logger, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Trace)) return;
        logger.Log(LogLevel.Trace, new object?[] { messageBit0, messageBit1 });
    }
    public static void Trace<T0, T1>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Trace)) return;
        logger.Log(LogLevel.Trace, exception, new object?[] { messageBit0, messageBit1 });
    }
    public static void Debug<T0, T1>(this Logger logger, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Debug)) return;
        logger.Log(LogLevel.Debug, new object?[] { messageBit0, messageBit1 });
    }
    public static void Debug<T0, T1>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Debug)) return;
        logger.Log(LogLevel.Debug, exception, new object?[] { messageBit0, messageBit1 });
    }
    public static void Information<T0, T1>(this Logger logger, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Information)) return;
        logger.Log(LogLevel.Information, new object?[] { messageBit0, messageBit1 });
    }
    public static void Information<T0, T1>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Information)) return;
        logger.Log(LogLevel.Information, exception, new object?[] { messageBit0, messageBit1 });
    }
    public static void Warning<T0, T1>(this Logger logger, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Warning)) return;
        logger.Log(LogLevel.Warning, new object?[] { messageBit0, messageBit1 });
    }
    public static void Warning<T0, T1>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Warning)) return;
        logger.Log(LogLevel.Warning, exception, new object?[] { messageBit0, messageBit1 });
    }
    public static void Error<T0, T1>(this Logger logger, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Error)) return;
        logger.Log(LogLevel.Error, new object?[] { messageBit0, messageBit1 });
    }
    public static void Error<T0, T1>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Error)) return;
        logger.Log(LogLevel.Error, exception, new object?[] { messageBit0, messageBit1 });
    }
    public static void Critical<T0, T1>(this Logger logger, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Critical)) return;
        logger.Log(LogLevel.Critical, new object?[] { messageBit0, messageBit1 });
    }
    public static void Critical<T0, T1>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1) {
        if (!logger.EnabledFor(LogLevel.Critical)) return;
        logger.Log(LogLevel.Critical, exception, new object?[] { messageBit0, messageBit1 });
    }
    public static void Trace<T0, T1, T2>(this Logger logger, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Trace)) return;
        logger.Log(LogLevel.Trace, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
    public static void Trace<T0, T1, T2>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Trace)) return;
        logger.Log(LogLevel.Trace, exception, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
    public static void Debug<T0, T1, T2>(this Logger logger, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Debug)) return;
        logger.Log(LogLevel.Debug, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
    public static void Debug<T0, T1, T2>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Debug)) return;
        logger.Log(LogLevel.Debug, exception, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
    public static void Information<T0, T1, T2>(this Logger logger, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Information)) return;
        logger.Log(LogLevel.Information, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
    public static void Information<T0, T1, T2>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Information)) return;
        logger.Log(LogLevel.Information, exception, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
    public static void Warning<T0, T1, T2>(this Logger logger, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Warning)) return;
        logger.Log(LogLevel.Warning, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
    public static void Warning<T0, T1, T2>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Warning)) return;
        logger.Log(LogLevel.Warning, exception, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
    public static void Error<T0, T1, T2>(this Logger logger, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Error)) return;
        logger.Log(LogLevel.Error, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
    public static void Error<T0, T1, T2>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Error)) return;
        logger.Log(LogLevel.Error, exception, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
    public static void Critical<T0, T1, T2>(this Logger logger, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Critical)) return;
        logger.Log(LogLevel.Critical, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
    public static void Critical<T0, T1, T2>(this Logger logger, Exception exception, T0 messageBit0, T1 messageBit1, T2 messageBit2) {
        if (!logger.EnabledFor(LogLevel.Critical)) return;
        logger.Log(LogLevel.Critical, exception, new object?[] { messageBit0, messageBit1, messageBit2 });
    }
}